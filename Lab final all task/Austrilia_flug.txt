#include <GL/gl.h>
#include <GL/glut.h>
void cross()
{
    glBegin(GL_LINES); // nasim line draw
    glColor3f(1, 1, 1);
    glVertex3i(-100, 0, 0);
    glVertex3i(100, 0, 0);
    glEnd();

    glBegin(GL_LINES); // nasim line draw
    glColor3f(1, 1, 1);
    glVertex3i(0, 100, 0);
    glVertex3i(0, -100, 0);
    glEnd();
}
void display(void)
{
    /* clear all pixels */
    glClear(GL_COLOR_BUFFER_BIT);

    glColor3f(0.0f, 0.0f, 0.7f);
    glRectd(-100, 100, 0, 0);



    //=======================FLAG===============
    glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-105, 95);
    glVertex2d(-95, 105);
    glVertex2d(5, 5);
    glVertex2d(-6, -4);
    glEnd();
    glColor4f(1.0f, .0f, .0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-100, 95);
    glVertex2d(-95, 98);
    glVertex2d(2, 2);
    glVertex2d(-4, -2);
    glEnd();
    //======================END===============================

//=======================First Part===========================

    glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-105, 95);
    glVertex2d(-95, 105);
    glVertex2d(5, 5);
    glVertex2d(-6, -4);
    glEnd();
    glColor4f(1.0f, .0f, .0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-100, 95);
    glVertex2d(-95, 98);
    glVertex2d(2, 2);
    glVertex2d(-4, -2);
    glEnd();
    /*===================END=======================*/


//=======================2rd=====================
    glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-100, 10);
    glVertex2d(0, 105);
    glVertex2d(0, 90);
    glVertex2d(-100, -5);
    glEnd();
    glColor4f(1.0f, .0f, .0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-100, 4);
    glVertex2d(0, 100);
    glVertex2d(0, 93);
    glVertex2d(-100, -3);
    glEnd();
    /*=======================END======================*/


/*==============3rd===========================*/

    glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-100, 60);
    glVertex2d(0, 60);
    glVertex2d(0, 40);
    glVertex2d(-100, 40);
    glEnd();
    glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-60, 100);
    glVertex2d(-40, 100);
    glVertex2d(-40, 0);
    glVertex2d(-60, 0);
    glEnd();



    //================4th==========================

    glColor4f(1.0f, 0.0f, 0.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-100, 55);
    glVertex2d(0, 55);
    glVertex2d(0, 45);
    glVertex2d(-100, 45);
    glEnd();

    glColor4f(1.0f, 0.0f, 0.0f, 0.0f);
    glBegin(GL_POLYGON);
    glVertex2d(-55, 100);
    glVertex2d(-45, 100);
    glVertex2d(-45, 0);
    glVertex2d(-55, 0);
    glEnd();


    /*=======================END======================*/


    //======================
    glColor3f(0.0f, 0.0f, 0.7f);
    glRectd(0, 0, 100, 100);

    glColor3f(0.0f, 0.0f, 0.7f);
    glRectd(-100, -100, 0, 0);

    glColor3f(0.0f, 0.0f, 0.7f);
    glRectd(0, 0, 100, -100);
    //==========================


    cross();
    glFlush();
}
void init(void)
{
    /* select clearing (background) color */
    glClearColor(0.0, 0.0, 0.0, 0.0);
    /* initialize viewing values */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-100.0, 100.0, -100.0, 100.0, -10.0, 10.0);
    //-x,x,-y,y
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(1000, 600);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Flag");
    init();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0; /* ISO C requires main to return int. */
}
